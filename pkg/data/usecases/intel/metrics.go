package intel

import (
	"github.com/timescale/tsbs/pkg/data"
	"github.com/timescale/tsbs/pkg/data/usecases/common"
	"math/rand"
	"time"
)

var (
	labelIntel  = []byte("intel") // heap optimization
	intelFields = []common.LabeledDistributionMaker{
		{Label: []byte("mongodb_asserts_regular"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_asserts_rollovers"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_asserts_user"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_asserts_warning"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_clusterTime_signature_keyId"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_active"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_available"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_awaitingTopologyChanges"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_current"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_exhaustHello"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_exhaustIsMaster"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_connections_totalCreated"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_defaultRWConcern_localUpdateWallClockTime"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_averageCatchUpOps"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_catchUpTakeover_called"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_catchUpTakeover_successful"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_electionTimeout_called"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_electionTimeout_successful"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_freezeTimeout_called"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_freezeTimeout_successful"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUps"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsAlreadyCaughtUp"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsFailedWithError"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsFailedWithNewTerm"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsFailedWithReplSetAbortPrimaryCatchUpCmd"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsSkipped"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsSucceeded"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numCatchUpsTimedOut"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_numStepDownsCausedByHigherTerm"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_priorityTakeover_called"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_priorityTakeover_successful"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_stepUpCmd_called"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_electionMetrics_stepUpCmd_successful"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_encryptionAtRest_encryptionEnabled"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_input_blocks"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_involuntary_context_switches"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_maximum_resident_set_kb"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_output_blocks"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_page_faults"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_page_reclaims"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_system_time_us"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_user_time_us"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_extra_info_voluntary_context_switches"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_enabled"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_isLagged"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_isLaggedCount"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_isLaggedTimeMicros"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_locksPerKiloOp"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_sustainerRate"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_targetRateLimit"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_flowControl_timeAcquiringMicros"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_activeClients_readers"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_activeClients_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_activeClients_writers"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_currentQueue_readers"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_currentQueue_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_currentQueue_writers"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_globalLock_totalTime"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_localTime"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Collection_acquireCount_W"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Collection_acquireCount_r"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Collection_acquireCount_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Database_acquireCount_W"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Database_acquireCount_r"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Database_acquireCount_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Global_acquireCount_W"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Global_acquireCount_r"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Global_acquireCount_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_Mutex_acquireCount_r"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_ParallelBatchWriterMode_acquireCount_W"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_ParallelBatchWriterMode_acquireCount_r"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_ReplicationStateTransition_acquireCount_W"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_ReplicationStateTransition_acquireCount_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_ReplicationStateTransition_acquireWaitCount_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_ReplicationStateTransition_timeAcquiringMicros_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_oplog_acquireCount_W"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_oplog_acquireCount_r"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_locks_oplog_acquireCount_w"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_activeSessionsCount"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastSessionsCollectionJobCursorsClosed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastSessionsCollectionJobDurationMillis"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastSessionsCollectionJobEntriesEnded"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastSessionsCollectionJobEntriesRefreshed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastSessionsCollectionJobTimestamp"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastTransactionReaperJobDurationMillis"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastTransactionReaperJobEntriesCleanedUp"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_lastTransactionReaperJobTimestamp"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_sessionCatalogSize"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_sessionsCollectionJobCount"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_logicalSessionRecordCache_transactionReaperJobCount"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_mem_bits"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_mem_resident"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_mem_supported"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_mem_virtual"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_members_health"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_members_id"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_members_optimeDate"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_members_optime_t"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_members_self"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_members_state"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_addFields"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_backupCursor"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_backupCursorExtend"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_bucket"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_bucketAuto"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_changeStream"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_collStats"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_count"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_currentOp"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_documents"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_facet"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_geoNear"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_graphLookup"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_group"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_indexStats"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_internalInhibitOptimization"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_internalSearchIdLookup"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_internalSearchMongotRemote"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_internalSplitPipeline"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_limit"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_listLocalSessions"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_listSessions"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_lookup"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_match"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_merge"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_mergeCursors"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_out"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_planCacheStats"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_project"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_queue"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_redact"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_replaceRoot"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_replaceWith"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_sample"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_search"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_searchBeta"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_searchMeta"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_set"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_skip"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_sort"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_sortByCount"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_unionWith"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_unset"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_aggStageCounters_unwind"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_UNKNOWN"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_abortTransaction_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_abortTransaction_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_addShard_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_addShard_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_aggregate_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_aggregate_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_appendOplogNote_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_appendOplogNote_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_applyOps_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_applyOps_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_authenticate_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_authenticate_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_availableQueryOptions_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_availableQueryOptions_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_buildInfo_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_buildInfo_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_checkShardingIndex_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_checkShardingIndex_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_cleanupOrphaned_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_cleanupOrphaned_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_cloneCollectionAsCapped_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_cloneCollectionAsCapped_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_cloneCollectionOptionsFromPrimaryShard_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_cloneCollectionOptionsFromPrimaryShard_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_collMod_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_collMod_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_collStats_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_collStats_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_commitTransaction_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_commitTransaction_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_compact_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_compact_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrAddShardToZone_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrAddShardToZone_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrAddShard_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrAddShard_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerCollectionStatus_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerCollectionStatus_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerStart_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerStart_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerStatus_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerStatus_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerStop_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrBalancerStop_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrClearJumboFlag_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrClearJumboFlag_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunkMerge_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunkMerge_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunkMigration_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunkMigration_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunkSplit_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunkSplit_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunksMerge_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitChunksMerge_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitMovePrimary_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCommitMovePrimary_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCreateCollection_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCreateCollection_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCreateDatabase_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrCreateDatabase_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrDropCollection_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrDropCollection_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrDropDatabase_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrDropDatabase_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrEnableSharding_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrEnableSharding_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrEnsureChunkVersionIsGreaterThan_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrEnsureChunkVersionIsGreaterThan_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrMoveChunk_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrMoveChunk_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrMovePrimary_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrMovePrimary_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrRefineCollectionShardKey_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrRefineCollectionShardKey_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrRemoveShardFromZone_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrRemoveShardFromZone_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrRemoveShard_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrRemoveShard_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrShardCollection_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrShardCollection_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrUpdateZoneKeyRange_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_configsvrUpdateZoneKeyRange_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_connPoolStats_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_connPoolStats_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_connPoolSync_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_connPoolSync_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_connectionStatus_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_connectionStatus_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_convertToCapped_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_convertToCapped_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_coordinateCommitTransaction_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_coordinateCommitTransaction_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_count_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_count_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_createIndexes_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_createIndexes_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_createRole_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_createRole_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_createUser_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_createUser_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_create_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_create_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_currentOp_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_currentOp_total"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
		{Label: []byte("mongodb_metrics_commands_dataSize_failed"), DistributionMaker: func() common.Distribution { return common.CWD(intelND, 0.0, 100.0, rand.Float64()*100.0) }},
	}
)

// Reuse NormalDistributions as arguments to other distributions. This is
// safe to do because the higher-level distribution advances the ND and
// immediately uses its value and saves the state
var intelND = common.ND(0.0, 1.0)

type IntelMeasurement struct {
	*common.SubsystemMeasurement
}

func NewIntelMeasurement(start time.Time) *IntelMeasurement {
	return newCPUMeasurementNumDistributions(start, len(intelFields))
}

func newCPUMeasurementNumDistributions(start time.Time, numDistributions int) *IntelMeasurement {
	sub := common.NewSubsystemMeasurementWithDistributionMakers(start, intelFields[:numDistributions])
	return &IntelMeasurement{sub}
}

func (m *IntelMeasurement) ToPoint(p *data.Point) {
	m.ToPointAllInt64(p, labelIntel, intelFields)
}
